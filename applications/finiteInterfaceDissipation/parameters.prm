# =================================================================================
# Set the number of dimensions (2 or 3 for a 2D or 3D calculation)
# =================================================================================
set Number of dimensions = 2

# =================================================================================
# Set the length of the domain in all three dimensions
# (Domain size Z ignored in 2D)
# =================================================================================
# Each axes spans from zero to the specified length
set Domain size X = 5.0
set Domain size Y = 5.0
#set Domain size Z = 300

# =================================================================================
# Set the element parameters
# =================================================================================
# The number of elements in each direction is 2^(refineFactor) * subdivisions
# Subdivisions Z ignored in 2D
# For optimal performance, use refineFactor primarily to determine the element size
set Subdivisions X = 1
set Subdivisions Y = 1
#set Subdivisions Z = 3

set Refine factor = 8

# Set the polynomial degree of the element (allowed values: 1, 2, or 3)
set Element degree = 1

# =================================================================================
# Set the adaptive mesh refinement parameters
# =================================================================================
# Set the flag determining if adaptive meshing is activated
set Mesh adaptivity = true

# Set the maximum and minimum level of refinement
# When adaptive meshing is enabled, the refine factor set in the block above is
# only used to generate the first pass of the mesh as the initial conditions are
# applied. It should be set somewhere between the max and min levels below.
set Max refinement level = 8
set Min refinement level = 3

# Set the number of time steps between remeshing operations
set Steps between remeshing operations = 250

# Set the criteria for adapting the mesh
subsection Refinement criterion: n0
    # Select whether the mesh is refined based on the variable value (VALUE),
    # its gradient (GRADIENT), or both (VALUE_AND_GRADIENT)
    set Criterion type = VALUE
    # Set the lower and upper bounds for the value-based refinement window
    set Value lower bound = 0.001
    set Value upper bound = 0.999
end
subsection Refinement criterion: n1
    # Select whether the mesh is refined based on the variable value (VALUE),
    # its gradient (GRADIENT), or both (VALUE_AND_GRADIENT)
    set Criterion type = VALUE
    # Set the lower and upper bounds for the value-based refinement window
    set Value lower bound = 0.001
    set Value upper bound = 0.999
end
subsection Refinement criterion: n2
    # Select whether the mesh is refined based on the variable value (VALUE),
    # its gradient (GRADIENT), or both (VALUE_AND_GRADIENT)
    set Criterion type = VALUE
    # Set the lower and upper bounds for the value-based refinement window
    set Value lower bound = 0.001
    set Value upper bound = 0.999
end
#subsection Refinement criterion: mu0
#    # Select whether the mesh is refined based on the variable value (VALUE),
#    # its gradient (GRADIENT), or both (VALUE_AND_GRADIENT)
#    set Criterion type = GRADIENT
#    # Set the lower and upper bounds for the value-based refinement window
#    set Gradient magnitude lower bound = 0.5
#end
#subsection Refinement criterion: mu1
#    # Select whether the mesh is refined based on the variable value (VALUE),
#    # its gradient (GRADIENT), or both (VALUE_AND_GRADIENT)
#    set Criterion type = GRADIENT
#    # Set the lower and upper bounds for the value-based refinement window
#    set Gradient magnitude lower bound = 2.0
#end

# =================================================================================
# Set the time step parameters
# =================================================================================
# The size of the time step
set Time step = 1.0e-3

# The simulation ends when either the number of time steps is reached or the
# simulation time is reached.
set Number of time steps = 200000

# =================================================================================
# Set the boundary conditions
# =================================================================================
# Set the boundary condition for each variable, where each variable is given by
# its name, as defined in equations.h. The four boundary condition
# types are NATURAL, DIRICHLET, NON_UNIFORM_DIRICHLET and PERIODIC. If all
# of the boundaries have the same boundary condition, only one boundary condition
# type needs to be given. If multiple boundary condition types are needed, give a
# comma-separated list of the types. The order is the minimum of x, maximum of x,
# minimum of y, maximum of y, minimum of z, maximum of z (i.e left, right, bottom,
# top in 2D and left, right, bottom, top, front, back in 3D). The value of a
# Dirichlet BC is specified in the following way -- DIRCHILET: val -- where 'val' is
# the desired value. If the boundary condition is NON_UNIFORM_DIRICHLET, the
# boundary condition should be specified in the appropriate function in 'ICs_and_BCs.h'.
# Example 1: All periodic BCs for variable 'c'
# set Boundary condition for variable c = PERIODIC
# Example 2: Zero-derivative BCs on the left and right, Dirichlet BCs with value
# 1.5 on the top and bottom for variable 'n' in 2D
# set Boundary condition for variable n = NATURAL, NATURAL, DIRICHLET: 1.5, DIRICHLET: 1.5
# PERIODIC, NATURAL, PERIODIC, NATURAL
# PERIODIC, PERIODIC, NATURAL, NATURAL

set Boundary condition for variable n0 =  PERIODIC
set Boundary condition for variable n1 =  PERIODIC
set Boundary condition for variable n2 =  PERIODIC

set Boundary condition for variable dndt0 =  PERIODIC
set Boundary condition for variable dndt1 =  PERIODIC
set Boundary condition for variable dndt2 =  PERIODIC

set Boundary condition for variable mu0 =  PERIODIC


# =================================================================================
# Set the output parameters
# =================================================================================
# Type of spacing between outputs ("EQUAL_SPACING", "LOG_SPACING", "N_PER_DECADE",
# or "LIST")
set Output condition = EQUAL_SPACING

# Number of times the program outputs the fields (total number for "EQUAL_SPACING"
# and "LOG_SPACING", number per decade for "N_PER_DECADE", ignored for "LIST")
set Number of outputs = 250

# The number of time steps between updates being printed to the screen
set Skip print steps = 25

# =================================================================================
# Set the checkpoint/restart parameters
# =================================================================================
# Whether to start this simulation from the checkpoint of a previous simulation
set Load from a checkpoint = false

# Type of spacing between checkpoints ("EQUAL_SPACING", "LOG_SPACING", "N_PER_DECADE",
# or "LIST")
set Checkpoint condition = EQUAL_SPACING

# Number of times the creates checkpoints (total number for "EQUAL_SPACING"
# and "LOG_SPACING", number per decade for "N_PER_DECADE", ignored for "LIST")
set Number of checkpoints = 2

# =================================================================================
# Set the model constants
# =================================================================================
# Set the user-defined model constants, which must have a counter-part given in
# customPDE.h. These are most often used in the residual equations in equations.h,
# but may also be used for initial conditions and nucleation calculations. The type
# options currently are DOUBLE, INT, BOOL, STRING (without commas), DOUBLE ARRAY, INT ARRAY,
# BOOL ARRAY, STRING ARRAY, TENSOR, and [symmetry] ELASTIC CONSTANTS
# where [symmetry] is ISOTROPIC, TRANSVERSE, ORTHOTROPIC, or ANISOTROPIC.

# Number of order parameters 
set Model constant num_ops = 3, INT

# =================================================================================
# Select whether to set phase id's by index or by name. If NAME, is specified, then
# variable 'phase_names' must be specified and 'phase_id' must be a STRING ARRAY.
# Otherwise, (if INDEX specified,) the 'phase_id' must be an INT ARRAY.
# NAME or INDEX
set Model constant set_ids_by = NAME, STRING

# phase names by at each phase index. Size num_phases
set Model constant phase_names = LIQUID, ALPHA, BETA, STRING ARRAY

# phase_id for each parameter. Size num_ops
# set Model constant phase_id = 0, 1, 2, INT ARRAY

# phase_id for each parameter. Size num_ops
set Model constant phase_id = LIQUID, ALPHA, BETA, STRING ARRAY
# =================================================================================

# Number of Phases possible in this model
set Model constant num_phases = 3, INT

# Number of species present (including solvent/matrix)
set Model constant num_comps = 2, INT

# Free energy well minima
set Model constant fWell = 6.0, -0.0, -0.0, DOUBLE ARRAY

# Free energy well curvatures
    # Has size num_phases * (num_comps-1)
    # Written in order of phase, component
    # [phase1-comp1, phase1-comp2, phase1-comp3, ... , phase1-compN,
    #  phase2-comp1, phase2-comp2, phase2-comp3, ... , phase2-compN, ...]
set Model constant kWell = 60.0,  60.0,  60.0, DOUBLE ARRAY

# Free energy well composition minima
    # Has size num_phases * (num_comps-1)
    # Written in order of phase, component
    # [phase1-comp1, phase1-comp2, phase1-comp3, ... , phase1-compN,
    #  phase2-comp1, phase2-comp2, phase2-comp3, ... , phase2-compN, ...]
set Model constant cmin = 0.50,  0.95,  0.05,  DOUBLE ARRAY

# Grain Mobility
set Model constant L = 10.0, DOUBLE

# Interface term
set Model constant gamma = 1.5, DOUBLE

# Interface width (m)
set Model constant l_gb = 0.1, DOUBLE

# Interface energy (J/m^3)
set Model constant sigma = 0.666, DOUBLE

# Length scale (m)
set Model constant l0 = 1.0, DOUBLE

# Component Mobility
set Model constant D = 0.03, 0.03, 0.03, DOUBLE ARRAY

# Volume Scale
set Model constant Va = 1.0, DOUBLE

# Initial Compositions
set Model constant c0 = 0.50, 0.0, 0.0, DOUBLE ARRAY

# =================================================================================
# Set nucleation parameters
# =================================================================================

# Phase to nucleate
# Nucleation parameters won't be read if this is NONE
set Model constant nuc_phase = ALPHA, STRING

# Nucleation constant 1
set Model constant k1 = 50000.0, DOUBLE

# Nucleation constant 2
set Model constant k2 = 6.0, DOUBLE

# Incubation time before nucleation
set Model constant tau = 0.1, DOUBLE

# Nucleation force
set Model constant nuc_force = 50.0, DOUBLE

# =================================================================================
# Set the nucleation parameters
# =================================================================================

set Time steps between nucleation attempts = 50
set Minimum allowed distance between nuclei = 1
set Order parameter cutoff value = 0.5

subsection Nucleation parameters: n1
    set Nucleus semiaxes (x, y, z) = 0.06, 0.06, 0.06
    set Freeze zone semiaxes (x, y, z) = 0.4, 0.4, 0.4
    set Nucleus rotation in degrees (x, y, z) = 0, 0, 0
    set Freeze time following nucleation = 0.002
    #set Nucleation-free border thickness = 1.0
end

subsection Nucleation parameters: n2
    set Nucleus semiaxes (x, y, z) = 0.06, 0.06, 0.06
    set Freeze zone semiaxes (x, y, z) = 0.4, 0.4, 0.4
    set Nucleus rotation in degrees (x, y, z) = 0, 0, 0
    set Freeze time following nucleation = 0.002
    #set Nucleation-free border thickness = 1.0
end